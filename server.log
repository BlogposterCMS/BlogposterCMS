
> bloposter_cms@0.0.1 start
> node app.js

[NotificationEmitter] Initialized.
[MotherEmitter] Initialized motherEmitter instance.
[SERVER INIT] Loading Auth module…
[AUTH MODULE] Initializing core Auth Module...
[AUTH MODULE] Setting up meltdown events...like a boss.
[ADMIN LOCAL STRATEGY] Initializing "adminLocal" login strategy... because local logins are oh so fancy.
[MotherEmitter] skipJWT => authorized for event="registerLoginStrategy". Normal emit.
[AUTH MODULE] Registered login strategy => adminLocal
[ADMIN LOCAL STRATEGY] Strategy "adminLocal" registered successfully.
[AUTH MODULE] Loaded strategy => adminLocal.js
[FACEBOOK STRATEGY] Initializing Facebook login strategy...
[MotherEmitter] skipJWT => authorized for event="registerLoginStrategy". Normal emit.
[AUTH MODULE] Registered login strategy => facebook
[FACEBOOK STRATEGY] Strategy "facebook" registered successfully.
[AUTH MODULE] Loaded strategy => facebook.js
[GOOGLE STRATEGY] Initializing Google login strategy...
[MotherEmitter] skipJWT => authorized for event="registerLoginStrategy". Normal emit.
[AUTH MODULE] Registered login strategy => google
[GOOGLE STRATEGY] Strategy "google" registered successfully.
[AUTH MODULE] Loaded strategy => google.js
[AUTH MODULE] Core Auth Module initialized successfully.
[SERVER INIT] Auth module loaded.
[SERVER INIT] Requesting DB‑manager token…
[MotherEmitter] skipJWT => authorized for event="issueModuleToken". Normal emit.
[AUTH MODULE] issueModuleToken => meltdown sees moduleName='auth', signed as='databaseManager', jti=a1142fa054e2d2f84dda14b988513b48
[SERVER INIT] dbManagerToken obtained.
[SERVER INIT] Loading databaseManager…
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'system',
  priority: 'info',
  message: '[DB MANAGER] Initializing Database Manager Module...'
}
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: '[DB MANAGER] Ensuring shared schema for "databaseManager" in the main DB...'
}
[MotherEmitter] Emitting event="createDatabase" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'databaseManager',
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[NotificationEmitter] Unknown notificationType "debug". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'debug',
  priority: 'debug',
  message: 'Schema "databasemanager" already exists in DB "postgres".'
}
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: 'Successfully created/fixed shared schema in Postgres main DB for "databaseManager".'
}
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: '[DB MANAGER] Shared schema "databasemanager" creation done (if needed).'
}
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: '[DB MANAGER] Table "databasemanager.module_users" ensured successfully.'
}
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'system',
  priority: 'info',
  message: '[DB MANAGER] Database Manager Module initialized. Using DB type="postgres".'
}
[SERVER INIT] databaseManager loaded.
[SERVER INIT] Loading userManagement…
[USER MANAGEMENT] Initializing user management module...
[USER SERVICE] Ensuring the userManagement data store…
[MotherEmitter] Emitting event="createDatabase" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'userManagement',
    moduleType: 'core',
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[NotificationEmitter] Unknown notificationType "debug". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'debug',
  priority: 'debug',
  message: 'Schema "usermanagement" already exists in DB "postgres".'
}
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: 'Successfully created/fixed shared schema in Postgres main DB for "userManagement".'
}
[USER SERVICE] data‑store creation done (if needed).
[USER SERVICE] Initialising user tables/collections…
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'userManagement',
    moduleType: 'core',
    table: '__rawSQL__',
    where: {},
    data: { rawSQL: 'INIT_USER_MANAGEMENT' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'userManagement',
    operation: 'INIT_USER_MANAGEMENT',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[NotificationEmitter] Unknown notificationType "debug". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'debug',
  priority: 'debug',
  message: '[PLACEHOLDER REGISTRY] No existing JSON => skipping load.'
}
[NotificationEmitter] Unknown notificationType "debug". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'debug',
  priority: 'debug',
  message: '[PostgresEngine] Created global main DB pool => postgres'
}
[USER SERVICE] tables ensured/created.
[USER SERVICE] Checking default roles…
[MotherEmitter] Emitting event="dbSelect" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'userManagement',
    moduleType: 'core',
    table: 'roles',
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[dbSelect] No remote URL detected. Using localDbSelect.
[dbSelect] Payload: {
  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtb2R1bGVOYW1lIjoiZGF0YWJhc2VNYW5hZ2VyIiwidHJ1c3RMZXZlbCI6ImhpZ2giLCJqdGkiOiJhMTE0MmZhMDU0ZTJkMmY4NGRkYTE0Yjk4ODUxM2I0OCIsImlhdCI6MTc0NTQxOTExOSwiZXhwIjoxNzQ1NTA1NTE5fQ.NVB1bXPtnrHFVsqkghNywmHllGAmqO0nxZHqARM-DGA",
  "moduleName": "userManagement",
  "moduleType": "core",
  "table": "roles",
  "decodedJWT": {
    "moduleName": "databaseManager",
    "trustLevel": "high",
    "jti": "a1142fa054e2d2f84dda14b988513b48",
    "iat": 1745419119,
    "exp": 1745505519
  }
}
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'userManagement',
    operation: '\n' +
      '    SELECT *\n' +
      '    FROM "usermanagement"."roles"\n' +
      '    \n' +
      '    ORDER BY id DESC\n' +
      '  ',
    params: [],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[USER SERVICE] Default roles ensured.
[USER SERVICE] Verifying that at least one admin exists…
[MotherEmitter] Emitting event="dbSelect" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'userManagement',
    moduleType: 'core',
    table: 'roles',
    where: { role_name: 'admin' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[dbSelect] No remote URL detected. Using localDbSelect.
[dbSelect] Payload: {
  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtb2R1bGVOYW1lIjoiZGF0YWJhc2VNYW5hZ2VyIiwidHJ1c3RMZXZlbCI6ImhpZ2giLCJqdGkiOiJhMTE0MmZhMDU0ZTJkMmY4NGRkYTE0Yjk4ODUxM2I0OCIsImlhdCI6MTc0NTQxOTExOSwiZXhwIjoxNzQ1NTA1NTE5fQ.NVB1bXPtnrHFVsqkghNywmHllGAmqO0nxZHqARM-DGA",
  "moduleName": "userManagement",
  "moduleType": "core",
  "table": "roles",
  "where": {
    "role_name": "admin"
  },
  "decodedJWT": {
    "moduleName": "databaseManager",
    "trustLevel": "high",
    "jti": "a1142fa054e2d2f84dda14b988513b48",
    "iat": 1745419119,
    "exp": 1745505519
  }
}
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'userManagement',
    operation: '\n' +
      '    SELECT *\n' +
      '    FROM "usermanagement"."roles"\n' +
      '    WHERE "role_name" = $1\n' +
      '    ORDER BY id DESC\n' +
      '  ',
    params: [ 'admin' ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="dbSelect" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'userManagement',
    moduleType: 'core',
    table: 'user_roles',
    where: { role_id: 1 },
    limit: 1,
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[dbSelect] No remote URL detected. Using localDbSelect.
[dbSelect] Payload: {
  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtb2R1bGVOYW1lIjoiZGF0YWJhc2VNYW5hZ2VyIiwidHJ1c3RMZXZlbCI6ImhpZ2giLCJqdGkiOiJhMTE0MmZhMDU0ZTJkMmY4NGRkYTE0Yjk4ODUxM2I0OCIsImlhdCI6MTc0NTQxOTExOSwiZXhwIjoxNzQ1NTA1NTE5fQ.NVB1bXPtnrHFVsqkghNywmHllGAmqO0nxZHqARM-DGA",
  "moduleName": "userManagement",
  "moduleType": "core",
  "table": "user_roles",
  "where": {
    "role_id": 1
  },
  "limit": 1,
  "decodedJWT": {
    "moduleName": "databaseManager",
    "trustLevel": "high",
    "jti": "a1142fa054e2d2f84dda14b988513b48",
    "iat": 1745419119,
    "exp": 1745505519
  }
}
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'userManagement',
    operation: '\n' +
      '    SELECT *\n' +
      '    FROM "usermanagement"."user_roles"\n' +
      '    WHERE "role_id" = $1\n' +
      '    ORDER BY id DESC\n' +
      '  ',
    params: [ 1 ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[USER SERVICE] Admin mapping exists – nothing to heal.
[USER MANAGEMENT] Module initialized successfully. meltdown meltdown avoided!
[SERVER INIT] userManagement loaded.
[SERVER INIT] Loading pagesManager…
[PAGE MANAGER] Initializing Page Manager...
[PAGE SERVICE] Ensuring pagesManager DB/Schema via createDatabase meltdown...
[MotherEmitter] Emitting event="createDatabase" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'pagesManager',
    moduleType: 'core',
    nonce: undefined,
    targetModuleName: 'pagesManager',
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[NotificationEmitter] Unknown notificationType "debug". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'debug',
  priority: 'debug',
  message: 'Schema "pagesmanager" already exists in DB "postgres".'
}
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: 'Successfully created/fixed shared schema in Postgres main DB for "pagesManager".'
}
[PAGE SERVICE] pagesManager DB/Schema creation done (if needed).
[PAGE SERVICE] Creating schema & table/collection for pagesManager...
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'pagesManager',
    moduleType: 'core',
    nonce: undefined,
    table: '__rawSQL__',
    where: {},
    data: { rawSQL: 'INIT_PAGES_SCHEMA' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'pagesManager',
    operation: 'INIT_PAGES_SCHEMA',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[PAGE SERVICE] Placeholder "INIT_PAGES_SCHEMA" done.
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'pagesManager',
    moduleType: 'core',
    nonce: undefined,
    table: '__rawSQL__',
    where: {},
    data: { rawSQL: 'INIT_PAGES_TABLE' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [AsyncFunction (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'pagesManager',
    operation: 'INIT_PAGES_TABLE',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[PAGE SERVICE] Placeholder "INIT_PAGES_TABLE" done.
[PAGE SERVICE] Checking/altering pages table/collection...
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'pagesManager',
    moduleType: 'core',
    nonce: undefined,
    table: '__rawSQL__',
    where: {},
    data: { rawSQL: 'CHECK_AND_ALTER_PAGES_TABLE' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'pagesManager',
    operation: 'CHECK_AND_ALTER_PAGES_TABLE',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[PAGE SERVICE] Placeholder "CHECK_AND_ALTER_PAGES_TABLE" done. Possibly meltdown is calm now.
[MotherEmitter] Public event => skipping meltdown checks for "issuePublicToken"
[MotherEmitter] Emitting: "issuePublicToken" => [
  { purpose: 'pagesPublic', moduleName: 'auth' },
  [Function (anonymous)]
]
[AUTH MODULE] issuePublicToken => purpose=pagesPublic, jti=acbcae491a2cc801f0dd701c6f6ad24f
[PAGE MANAGER] pagesPublicToken initialised ✔
[PAGE MANAGER] Initialized successfully. Ready to meltdown pages.
[SERVER INIT] pagesManager loaded.
[SERVER INIT] Loading settingsManager…
[SETTINGS MANAGER] Initializing SETTINGS MANAGER...
[SETTINGS MANAGER] Ensuring settingsManager DB/Schema via createDatabase...
[MotherEmitter] Emitting event="createDatabase" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    moduleType: 'core',
    nonce: 'modulesecretsaltkey123456',
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[NotificationEmitter] Unknown notificationType "debug". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'debug',
  priority: 'debug',
  message: 'Schema "settingsmanager" already exists in DB "postgres".'
}
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: 'Successfully created/fixed shared schema in Postgres main DB for "settingsManager".'
}
[SETTINGS MANAGER] settingsManager DB/Schema creation done (if needed).
[SETTINGS MANAGER] Creating schema & tables for settingsManager (yay placeholders).
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    moduleType: 'core',
    table: '__rawSQL__',
    data: { rawSQL: 'INIT_SETTINGS_SCHEMA' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    operation: 'INIT_SETTINGS_SCHEMA',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[SETTINGS MANAGER] Schema creation/verification done.
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    moduleType: 'core',
    table: '__rawSQL__',
    data: { rawSQL: 'INIT_SETTINGS_TABLES' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [AsyncFunction (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    operation: 'INIT_SETTINGS_TABLES',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[SETTINGS MANAGER] "cms_settings" & "module_events" creation/verification done.
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    moduleType: 'core',
    table: '__rawSQL__',
    data: { rawSQL: 'CHECK_AND_ALTER_SETTINGS_TABLES' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    operation: 'CHECK_AND_ALTER_SETTINGS_TABLES',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[SETTINGS MANAGER] All required columns ensured in cms_settings/module_events.
[SETTINGS MANAGER] Setting up meltdown event listeners...
[SETTINGS MANAGER] All meltdown event listeners set (dbSelect/dbUpdate placeholders).
[SETTINGS MANAGER] SETTINGS MANAGER initialized successfully.
[SERVER INIT] settingsManager loaded.
[SERVER INIT] Loading notificationManager…
[NOTIFICATION MANAGER] Initializing...
[NOTIFICATION MANAGER] Ready.
[SERVER INIT] notificationManager loaded.
[SERVER INIT] Loading dependencyLoader…
[DEPENDENCY LOADER] Initializing dependency loader... because apparently we need it.
[DEPENDENCY LOADER] No jwtToken provided => cannot proceed. Must meltdown now.
[SERVER INIT] dependencyLoader loaded.
[SERVER INIT] Loading unifiedSettings…
[UNIFIED SETTINGS] Initializing the Unified Settings module...
[UNIFIED SETTINGS] Module initialized successfully.
[SERVER INIT] unifiedSettings loaded.
[SERVER INIT] Loading serverManager…
[SERVER MANAGER] Initializing ServerManager Module...
[SERVER MANAGER] Ensuring serverManager DB/Schema via createDatabase meltdown...
[MotherEmitter] Emitting event="createDatabase" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'serverManager',
    moduleType: 'core',
    nonce: undefined,
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[NotificationEmitter] Unknown notificationType "debug". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'debug',
  priority: 'debug',
  message: 'Schema "servermanager" already exists in DB "postgres".'
}
[NOTIFICATION MANAGER] Received notification => { notificationType: 'system', priority: 'debug' }
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: 'Successfully created/fixed shared schema in Postgres main DB for "serverManager".'
}
[NOTIFICATION MANAGER] Received notification => { notificationType: 'system', priority: 'info' }
[SERVER MANAGER] DB/Schema creation done (if needed).
[SERVER MANAGER] Creating schema & table/collection for serverManager...
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'serverManager',
    moduleType: 'core',
    nonce: undefined,
    table: '__rawSQL__',
    data: { rawSQL: 'INIT_SERVERMANAGER_SCHEMA' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'serverManager',
    operation: 'INIT_SERVERMANAGER_SCHEMA',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[SERVER MANAGER] Placeholder "INIT_SERVERMANAGER_SCHEMA" done.
[SERVER MANAGER] Setting up meltdown event listeners for server locations...
[SERVER MANAGER] Module initialized successfully. Let the meltdown begin!
[SERVER INIT] serverManager loaded.
[SERVER INIT] Loading mediaManager…
[MEDIA MANAGER] Initializing...
[MEDIA MANAGER] Library folder already exists => /home/matteo/pCloudDrive/Blogposter/BlogposterCMS Headless Only/library
[MEDIA MANAGER] Ensuring mediaManager DB/Schema via createDatabase meltdown...
[MotherEmitter] Emitting event="createDatabase" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'mediaManager',
    moduleType: 'core',
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[NotificationEmitter] Unknown notificationType "debug". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'debug',
  priority: 'debug',
  message: 'Schema "mediamanager" already exists in DB "postgres".'
}
[NOTIFICATION MANAGER] Received notification => { notificationType: 'system', priority: 'debug' }
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: 'Successfully created/fixed shared schema in Postgres main DB for "mediaManager".'
}
[NOTIFICATION MANAGER] Received notification => { notificationType: 'system', priority: 'info' }
[MEDIA MANAGER] DB/Schema creation done (if needed).
[MEDIA MANAGER] Creating schema & table/collection for mediaManager...
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'mediaManager',
    moduleType: 'core',
    table: '__rawSQL__',
    data: { rawSQL: 'INIT_MEDIA_SCHEMA' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'mediaManager',
    operation: 'INIT_MEDIA_SCHEMA',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MEDIA MANAGER] Placeholder "INIT_MEDIA_SCHEMA" done. Possibly cats included.
[MEDIA MANAGER] Setting up meltdown events for local FS actions...
[MEDIA MANAGER] Ready!
[SERVER INIT] mediaManager loaded.
[SERVER INIT] Loading shareManager…
[SHARE MANAGER] Initializing ShareManager Module...
[SHARE MANAGER SERVICE] Ensuring shareManager DB/Schema via createDatabase...
[MotherEmitter] Emitting event="createDatabase" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'shareManager',
    moduleType: 'core',
    nonce: undefined,
    targetModuleName: 'sharemanager',
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[NotificationEmitter] Unknown notificationType "debug". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'debug',
  priority: 'debug',
  message: 'Schema "sharemanager" already exists in DB "postgres".'
}
[NOTIFICATION MANAGER] Received notification => { notificationType: 'system', priority: 'debug' }
[NotificationEmitter] Unknown notificationType "info". Using "system" as fallback.
[NotificationEmitter] Emitting "notify" => {
  moduleName: 'databaseManager',
  notificationType: 'info',
  priority: 'info',
  message: 'Successfully created/fixed shared schema in Postgres main DB for "shareManager".'
}
[NOTIFICATION MANAGER] Received notification => { notificationType: 'system', priority: 'info' }
[SHARE MANAGER SERVICE] shareManager DB/Schema creation done (if needed).
[SHARE MANAGER SERVICE] Creating schema & table/collection for shareManager...
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'shareManager',
    moduleType: 'core',
    nonce: undefined,
    table: '__rawSQL__',
    where: {},
    data: { rawSQL: 'INIT_SHARED_LINKS_TABLE' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'shareManager',
    operation: 'INIT_SHARED_LINKS_TABLE',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[SHARE MANAGER SERVICE] Placeholder "INIT_SHARED_LINKS_TABLE" done.
[SHARE MANAGER] Setting up meltdown event listeners for share links...
[SHARE MANAGER] ShareManager Module initialized successfully.
[SERVER INIT] shareManager loaded.
[SERVER INIT] Loading widgetManager…
[WIDGET MANAGER] Initializing...
[WIDGET SERVICE] Ensuring widget DB/Schema...
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'widgetManager',
    moduleType: 'core',
    nonce: undefined,
    table: '__rawSQL__',
    data: { rawSQL: 'INIT_WIDGETS_TABLE' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'widgetManager',
    operation: 'INIT_WIDGETS_TABLE',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[WIDGET SERVICE] Table "widgets" ensured/created.
[WIDGET MANAGER] Setting up meltdown events...
[WIDGET MANAGER] Initialized successfully.
[SERVER INIT] widgetManager loaded.
[SERVER INIT] Loading translationManager…
[TRANSLATION MANAGER] Initializing...
[TRANSLATION MANAGER] Ensuring translation tables/collections...
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'translationManager',
    moduleType: 'core',
    table: '__rawSQL__',
    data: { rawSQL: 'INIT_TRANSLATION_TABLES' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'translationManager',
    operation: 'INIT_TRANSLATION_TABLES',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[TRANSLATION] translation tables/collections ensured.
[TRANSLATION MANAGER] Setting up translation CRUD meltdown events...
[TRANSLATION MANAGER] Initialized successfully.
[SERVER INIT] translationManager loaded.
[SERVER INIT] Loading optional moduleLoader…
[MODULE LOADER] Starting up with enhanced Health Check...
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'moduleLoader',
    moduleType: 'core',
    table: '__rawSQL__',
    where: {},
    data: { rawSQL: 'INIT_MODULE_REGISTRY_TABLE' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'moduleLoader',
    operation: 'INIT_MODULE_REGISTRY_TABLE',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="dbSelect" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'moduleLoader',
    moduleType: 'core',
    table: '__rawSQL__',
    data: {
      rawSQL: 'CHECK_MODULE_REGISTRY_COLUMNS',
      rawSQLPlaceholder: 'CHECK_MODULE_REGISTRY_COLUMNS',
      schemaName: 'public',
      tableName: 'module_registry'
    },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[dbSelect] No remote URL detected. Using localDbSelect.
[dbSelect] Payload: {
  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtb2R1bGVOYW1lIjoiZGF0YWJhc2VNYW5hZ2VyIiwidHJ1c3RMZXZlbCI6ImhpZ2giLCJqdGkiOiJhMTE0MmZhMDU0ZTJkMmY4NGRkYTE0Yjk4ODUxM2I0OCIsImlhdCI6MTc0NTQxOTExOSwiZXhwIjoxNzQ1NTA1NTE5fQ.NVB1bXPtnrHFVsqkghNywmHllGAmqO0nxZHqARM-DGA",
  "moduleName": "moduleLoader",
  "moduleType": "core",
  "table": "__rawSQL__",
  "data": {
    "rawSQL": "CHECK_MODULE_REGISTRY_COLUMNS",
    "rawSQLPlaceholder": "CHECK_MODULE_REGISTRY_COLUMNS",
    "schemaName": "public",
    "tableName": "module_registry"
  },
  "decodedJWT": {
    "moduleName": "databaseManager",
    "trustLevel": "high",
    "jti": "a1142fa054e2d2f84dda14b988513b48",
    "iat": 1745419119,
    "exp": 1745505519
  }
}
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'moduleLoader',
    operation: 'CHECK_MODULE_REGISTRY_COLUMNS',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MODULE LOADER] module_registry schema ensured/updated (placeholder approach).
[MotherEmitter] Emitting event="getModuleRegistry" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'moduleLoader',
    moduleType: 'core',
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="dbSelect" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'moduleLoader',
    moduleType: 'core',
    table: '__rawSQL__',
    data: { rawSQL: 'SELECT_MODULE_REGISTRY' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[dbSelect] No remote URL detected. Using localDbSelect.
[dbSelect] Payload: {
  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtb2R1bGVOYW1lIjoiZGF0YWJhc2VNYW5hZ2VyIiwidHJ1c3RMZXZlbCI6ImhpZ2giLCJqdGkiOiJhMTE0MmZhMDU0ZTJkMmY4NGRkYTE0Yjk4ODUxM2I0OCIsImlhdCI6MTc0NTQxOTExOSwiZXhwIjoxNzQ1NTA1NTE5fQ.NVB1bXPtnrHFVsqkghNywmHllGAmqO0nxZHqARM-DGA",
  "moduleName": "moduleLoader",
  "moduleType": "core",
  "table": "__rawSQL__",
  "data": {
    "rawSQL": "SELECT_MODULE_REGISTRY"
  },
  "decodedJWT": {
    "moduleName": "databaseManager",
    "trustLevel": "high",
    "jti": "a1142fa054e2d2f84dda14b988513b48",
    "iat": 1745419119,
    "exp": 1745505519
  }
}
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'moduleLoader',
    operation: 'SELECT_MODULE_REGISTRY',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MODULE LOADER] moduleInfo.json missing for "dummyModule". Using defaults.
[MODULE LOADER] Auto-retrying "dummyModule" => last error: [E_MODULE_LOAD_FAILED] Error loading "dummyModule": HealthCheck-Emitter: A callback is required in emitter events.
[MotherEmitter] Registered module "dummyModule" => type="community"
[MODULE LOADER] Auto-retry => "dummyModule" gets another chance.
[DUMMY MODULE] Initializing dummyModule...
[MODULE LOADER] [E_MODULE_LOAD_FAILED] Error loading "dummyModule": HealthCheck-Emitter: A callback is required in emitter events.
[MotherEmitter] Emitting event="dbUpdate" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'moduleLoader',
    moduleType: 'core',
    table: 'module_registry',
    where: { module_name: 'dummyModule' },
    data: {
      is_active: false,
      last_error: '[E_MODULE_LOAD_FAILED] Error loading "dummyModule": HealthCheck-Emitter: A callback is required in emitter events.',
      updated_at: 2025-04-23T14:38:41.025Z
    },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'moduleLoader',
    operation: '\n' +
      '    UPDATE "moduleloader"."module_registry"\n' +
      '    SET "is_active" = $1, "last_error" = $2, "updated_at" = $3\n' +
      '    WHERE "module_name" = $4\n' +
      '    RETURNING *;\n' +
      '  ',
    params: [
      false,
      '[E_MODULE_LOAD_FAILED] Error loading "dummyModule": HealthCheck-Emitter: A callback is required in emitter events.',
      2025-04-23T14:38:41.025Z,
      'dummyModule'
    ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Public event => skipping meltdown checks for "removeListenersByModule"
[MotherEmitter] Emitting: "removeListenersByModule" => [ { moduleName: 'dummyModule' } ]
[MotherEmitter] Removing all event listeners for broken module => dummyModule
[MODULE LOADER] Auto-retrying "form" => last error: [E_MODULE_LOAD_FAILED] Error loading "form": Invalid payload from module "form" – missing moduleName/moduleType.
[MODULE LOADER] No folder => form. Possibly was deleted.
[MODULE LOADER] Auto-retrying "grapesPresets" => last error: [E_MODULE_LOAD_FAILED] Error loading "grapesPresets": [HEALTH CHECK] Module has no initialize() function.
[MODULE LOADER] No folder => grapesPresets. Possibly was deleted.
[MODULE LOADER] All optional modules loaded / retried successfully. The meltdown continues.
[SERVER INIT] moduleLoader done.
[SERVER INIT] Fetching active UI theme…
[MotherEmitter] Emitting event="getSetting" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    moduleType: 'core',
    key: 'activeAdminUI',
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[MotherEmitter] Emitting event="dbSelect" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    moduleType: 'core',
    table: '__rawSQL__',
    data: { rawSQL: 'GET_SETTING', key: 'activeAdminUI' },
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[dbSelect] No remote URL detected. Using localDbSelect.
[dbSelect] Payload: {
  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtb2R1bGVOYW1lIjoiZGF0YWJhc2VNYW5hZ2VyIiwidHJ1c3RMZXZlbCI6ImhpZ2giLCJqdGkiOiJhMTE0MmZhMDU0ZTJkMmY4NGRkYTE0Yjk4ODUxM2I0OCIsImlhdCI6MTc0NTQxOTExOSwiZXhwIjoxNzQ1NTA1NTE5fQ.NVB1bXPtnrHFVsqkghNywmHllGAmqO0nxZHqARM-DGA",
  "moduleName": "settingsManager",
  "moduleType": "core",
  "table": "__rawSQL__",
  "data": {
    "rawSQL": "GET_SETTING",
    "key": "activeAdminUI"
  },
  "decodedJWT": {
    "moduleName": "databaseManager",
    "trustLevel": "high",
    "jti": "a1142fa054e2d2f84dda14b988513b48",
    "iat": 1745419119,
    "exp": 1745505519
  }
}
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'settingsManager',
    operation: 'GET_SETTING',
    params: [ [Object] ],
    decodedJWT: {
      moduleName: 'databaseManager',
      trustLevel: 'high',
      jti: 'a1142fa054e2d2f84dda14b988513b48',
      iat: 1745419119,
      exp: 1745505519
    }
  },
  [Function (anonymous)]
]
[SERVER INIT] Mounting static assets (no CSRF)…
[SERVER INIT] Static mounts armed.
[CSR ROUTER DEBUG] ✅ Router at "/media" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/modules" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/pages" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/server" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/share" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/translation" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/unified-settings" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/user" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/widgets" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/admin" loaded.
[CSR ROUTER DEBUG] ✅ Router at "/core-settings" loaded.
[SERVER] BlogPosterCMS is listening on http://localhost:3000/
[PUBLIC ROUTER DEBUG] Requested slug: "/hello-world-bash"
[DEBUG] Entered catch-all GET route
[DEBUG] Extracted slug: hello-world-bash
[DEBUG] Public token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJhY2JjYWU0OTFhMmNjODAxZjBkZDcwMWM2ZjZhZDI0ZiIsInRydXN0TGV2ZWwiOiJsb3ciLCJpc1B1YmxpYyI6dHJ1ZSwicHVycG9zZSI6InBhZ2VzUHVibGljIiwiaWF0IjoxNzQ1NDE5MTIwLCJleHAiOjE3NDU0MjI3MjB9.iQNhCr-MSKuwtAI3HB2dIT3KWTcy3vskKuOvuOt6-cY
[DEBUG] rawSQLName: GET_PAGE_BY_SLUG
[DEBUG] Data object for DB query: { '0': 'hello-world-bash', '1': 'en', rawSQL: 'GET_PAGE_BY_SLUG' }
[MotherEmitter] Emitting event="dbSelect" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'pagesManager',
    moduleType: 'core',
    table: '__rawSQL__',
    data: { '0': 'hello-world-bash', '1': 'en', rawSQL: 'GET_PAGE_BY_SLUG' },
    decodedJWT: {
      jti: 'acbcae491a2cc801f0dd701c6f6ad24f',
      trustLevel: 'low',
      isPublic: true,
      purpose: 'pagesPublic',
      iat: 1745419120,
      exp: 1745422720
    }
  },
  [Function (anonymous)]
]
[dbSelect] No remote URL detected. Using localDbSelect.
[dbSelect] Payload: {
  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJhY2JjYWU0OTFhMmNjODAxZjBkZDcwMWM2ZjZhZDI0ZiIsInRydXN0TGV2ZWwiOiJsb3ciLCJpc1B1YmxpYyI6dHJ1ZSwicHVycG9zZSI6InBhZ2VzUHVibGljIiwiaWF0IjoxNzQ1NDE5MTIwLCJleHAiOjE3NDU0MjI3MjB9.iQNhCr-MSKuwtAI3HB2dIT3KWTcy3vskKuOvuOt6-cY",
  "moduleName": "pagesManager",
  "moduleType": "core",
  "table": "__rawSQL__",
  "data": {
    "0": "hello-world-bash",
    "1": "en",
    "rawSQL": "GET_PAGE_BY_SLUG"
  },
  "decodedJWT": {
    "jti": "acbcae491a2cc801f0dd701c6f6ad24f",
    "trustLevel": "low",
    "isPublic": true,
    "purpose": "pagesPublic",
    "iat": 1745419120,
    "exp": 1745422720
  }
}
[MotherEmitter] Emitting event="performDbOperation" => [
  {
    jwt: '<JWT-REDACTED>',
    moduleName: 'pagesManager',
    operation: 'GET_PAGE_BY_SLUG',
    params: [ 'hello-world-bash', 'en' ],
    decodedJWT: {
      jti: 'acbcae491a2cc801f0dd701c6f6ad24f',
      trustLevel: 'low',
      isPublic: true,
      purpose: 'pagesPublic',
      iat: 1745419120,
      exp: 1745422720
    }
  },
  [Function (anonymous)]
]
[DEBUG] dbSelect callback triggered
[DEBUG] DB query result rows: [
  {
    id: 3,
    slug: 'hello-world-bash',
    status: 'published',
    seo_image: '',
    is_start: false,
    created_at: 2025-04-22T19:06:10.785Z,
    updated_at: 2025-04-22T19:06:10.785Z,
    language: 'en',
    parent_id: null,
    is_content: false,
    page_id: 13,
    title: 'Hello World via Bash',
    html: '<div class="bashy">Hello Bash World!</div>',
    css: '.bashy { color: green; font-size: 40px; }',
    meta_desc: 'Test page via Bash',
    seo_title: 'Hello World Bash',
    seo_keywords: 'hello, world, bash'
  }
]
[DEBUG] Extracted page: {
  id: 3,
  slug: 'hello-world-bash',
  status: 'published',
  seo_image: '',
  is_start: false,
  created_at: 2025-04-22T19:06:10.785Z,
  updated_at: 2025-04-22T19:06:10.785Z,
  language: 'en',
  parent_id: null,
  is_content: false,
  page_id: 13,
  title: 'Hello World via Bash',
  html: '<div class="bashy">Hello Bash World!</div>',
  css: '.bashy { color: green; font-size: 40px; }',
  meta_desc: 'Test page via Bash',
  seo_title: 'Hello World Bash',
  seo_keywords: 'hello, world, bash'
}
[DEBUG] Page found: {
  id: 3,
  slug: 'hello-world-bash',
  status: 'published',
  seo_image: '',
  is_start: false,
  created_at: 2025-04-22T19:06:10.785Z,
  updated_at: 2025-04-22T19:06:10.785Z,
  language: 'en',
  parent_id: null,
  is_content: false,
  page_id: 13,
  title: 'Hello World via Bash',
  html: '<div class="bashy">Hello Bash World!</div>',
  css: '.bashy { color: green; font-size: 40px; }',
  meta_desc: 'Test page via Bash',
  seo_title: 'Hello World Bash',
  seo_keywords: 'hello, world, bash'
}
